{"version":3,"sources":["webpack:///./src/templates/category-posts.js","webpack:///./node_modules/gatsby-plugin-smoothscroll/index.js","webpack:///./src/components/post-grid.js","webpack:///./node_modules/reactstrap/es/Button.js","webpack:///./src/components/left-sidebar.js"],"names":["categoryQuery","CategoryPosts","data","category","pageContext","totalCount","allMarkdownRemark","pageHeader","title","lg","size","order","id","edges","map","edge","index","key","node","frontmatter","date","categories","slug","fields","excerpt","tags","image","featuredImage","childImageSharp","fluid","className","color","onClick","scrollTo","exports","__esModule","_default","selector","blockPosition","element","document","querySelector","scrollIntoView","behavior","block","PostGrid","to","Button","_React$Component","props","_this","call","this","bind","_proto","prototype","e","disabled","preventDefault","render","_this$props","active","ariaLabel","close","cssModule","outline","Tag","tag","innerRef","attributes","children","createElement","btnOutlineColor","classes","href","defaultAriaLabel","type","undefined","ref","Component","defaultProps","LeftSidebar"],"mappings":"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","file":"component---src-templates-category-posts-js-8a2292d3e4d8b7de8662.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { graphql } from \"gatsby\"\nimport {Row, Col, Button } from 'reactstrap'\nimport scrollTo from 'gatsby-plugin-smoothscroll';\n\nimport PostGrid from \"../components/post-grid\"\nimport LeftSidebar from \"../components/left-sidebar\"\nimport RightSidebar from \"../components/right-sidebar\"\n\n\nconst CategoryPosts = ({ data, pageContext }) => {\n  const { category } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const pageHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } categorized into \"${category}\"`\n\n  return (\n    <Layout>\n      <SEO title={`Category | ${category}`} />\n      <Row>        \n        <Col lg={{size: 6, order: 6}}>\n          <section>\n            <h4 id=\"page-header\">{pageHeader}</h4>\n            {data.allMarkdownRemark.edges.map((edge, index) => {\n              return (\n                <div key={index}>\n                  <PostGrid\n                    title={edge.node.frontmatter.title}\n                    date={edge.node.frontmatter.date}\n                    categories={edge.node.frontmatter.categories}\n                    slug={edge.node.fields.slug}\n                    excerpt={edge.node.excerpt}\n                    tags={edge.node.frontmatter.tags}\n                    image={\n                      edge.node.frontmatter.featuredImage.childImageSharp.fluid\n                    }\n                  />\n                </div>\n              )\n            })}\n            <div className=\"scroll-to\">\n              <Button color=\"link\" onClick={() => scrollTo('#page-header')}>Back to top</Button>\n            </div>\n            \n          </section>\n        </Col>\n        <Col lg={{size: 3, order: 1}}>\n          <LeftSidebar data={data} />\n        </Col>\n        <Col lg={{size: 3, order: 12}}>\n          <RightSidebar />\n        </Col>\n      </Row>\n    </Layout>\n  )\n}\n\n// It retruns data in props\nexport const categoryQuery = graphql`\n  query blogPostsByCategory($category: String!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            categories\n            date(formatString: \"MMMM Do, YYYY\")\n            tags\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 700) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n\nexport default CategoryPosts\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\n/**\n * Smooth scrolling onClick event handler\n * @param {string} selector argument will be passed to `querySelector`, usually an HTML id\n * @param {string} [blockPosition='start'] argument will be used to determine position where will be scrolled to (start, center, end, nearest)\n * @returns {boolean} false if `document.querySelector` doesn't find a match, otherwise true\n */\nvar scrollTo = function scrollTo(selector, blockPosition) {\n  if (blockPosition === void 0) {\n    blockPosition = 'start';\n  }\n\n  var element = document.querySelector(selector);\n\n  if (element) {\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: blockPosition\n    });\n    return true;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(\"gatsby-plugin-smoothscroll:\\n The selector: '%s' wasn't found in the document.\\n Make sure you pass in a valid CSS selector string.\", selector);\n  }\n\n  return false;\n};\n\nvar _default = scrollTo;\nexports[\"default\"] = _default;","import React from 'react'\nimport { Link } from 'gatsby'\nimport {Badge, Card, CardTitle, CardText, CardSubtitle, CardBody} from 'reactstrap'\nimport Img from 'gatsby-image'\n\nconst PostGrid = ({title, categories, slug, date, excerpt, image, tags}) => {\n\n    return (\n      <Card>\n         {/* you need a / in your <Link> component. Without that it'll take the relative path \n         https://stackoverflow.com/questions/62414838/gatsby-js-blog-is-appending-blog-twice-to-a-post\n         */}\n        <Link to={`/${slug}`}>\n          <Img fluid={image} />\n        </Link>\n        <CardBody>\n          <CardSubtitle>\n            <span>{date}</span>\n            {` `}\n            <ul className='post-categories'>\n              {categories.map((category, index) => (\n                <li key={index}>\n                    <Badge color='light'>{category}</Badge>\n                </li>\n              ))}\n            </ul>\n          </CardSubtitle>\n          <Link to={`/${slug}`}>\n            <CardTitle>{title}</CardTitle>\n            <CardText>{excerpt}</CardText>\n          </Link>      \n        </CardBody>        \n      </Card>\n    )\n}\n\nexport default PostGrid","import \"core-js/modules/es6.function.bind\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar defaultProps = {\n  color: 'secondary',\n  tag: 'button'\n};\n\nvar Button = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Button, _React$Component);\n\n  function Button(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Button.prototype;\n\n  _proto.onClick = function onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        ariaLabel = _this$props['aria-label'],\n        block = _this$props.block,\n        className = _this$props.className,\n        close = _this$props.close,\n        cssModule = _this$props.cssModule,\n        color = _this$props.color,\n        outline = _this$props.outline,\n        size = _this$props.size,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"active\", \"aria-label\", \"block\", \"className\", \"close\", \"cssModule\", \"color\", \"outline\", \"size\", \"tag\", \"innerRef\"]);\n\n    if (close && typeof attributes.children === 'undefined') {\n      attributes.children = React.createElement(\"span\", {\n        \"aria-hidden\": true\n      }, \"\\xD7\");\n    }\n\n    var btnOutlineColor = \"btn\" + (outline ? '-outline' : '') + \"-\" + color;\n    var classes = mapToCssModules(classNames(className, {\n      close: close\n    }, close || 'btn', close || btnOutlineColor, size ? \"btn-\" + size : false, block ? 'btn-block' : false, {\n      active: active,\n      disabled: this.props.disabled\n    }), cssModule);\n\n    if (attributes.href && Tag === 'button') {\n      Tag = 'a';\n    }\n\n    var defaultAriaLabel = close ? 'Close' : null;\n    return React.createElement(Tag, _extends({\n      type: Tag === 'button' && attributes.onClick ? 'button' : undefined\n    }, attributes, {\n      className: classes,\n      ref: innerRef,\n      onClick: this.onClick,\n      \"aria-label\": ariaLabel || defaultAriaLabel\n    }));\n  };\n\n  return Button;\n}(React.Component);\n\nButton.defaultProps = defaultProps;\nexport default Button;","import React from \"react\"\n// import {\n//   Card,\n//   CardTitle,\n//   CardBody,\n//   Badge,\n// } from \"reactstrap\"\n// import { Link } from \"gatsby\"\n// import { Slugify } from \"../util/slugify\"\n\nimport Author from \"./author\"\n\nconst LeftSidebar = ({ data }) => {\n  return (\n    <div>\n      <Author />\n      {/* <Card>\n        <CardBody>\n          <CardTitle className=\"mb-3\">Categories</CardTitle>\n\n          {data.allMarkdownRemark.edges.map((edge, index) => {\n            return (\n              <ul className=\"post-categories\" key={index}>\n                {edge.node.frontmatter.categories.map((category, index) => (\n                  <li key={index}>\n                    <Link to={`/categories/${Slugify(category)}`}>\n                      <Badge color=\"light\">{category}</Badge>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            )\n          })}\n        </CardBody>\n      </Card> */}\n    </div>\n  )\n}\n\nexport default LeftSidebar\n"],"sourceRoot":""}