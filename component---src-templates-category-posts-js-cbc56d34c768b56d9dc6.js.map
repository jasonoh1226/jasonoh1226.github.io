{"version":3,"sources":["webpack:///./src/templates/category-posts.js","webpack:///./node_modules/reactstrap/es/CardText.js","webpack:///./src/components/post-grid.js","webpack:///./src/components/left-sidebar.js"],"names":["categoryQuery","CategoryPosts","data","category","pageContext","allMarkdownRemark","totalCount","title","md","size","order","edges","map","edge","index","key","node","frontmatter","date","categories","slug","fields","excerpt","tags","image","featuredImage","childImageSharp","fluid","CardText","props","className","cssModule","Tag","tag","attributes","classes","createElement","defaultProps","PostGrid","to","color","LeftSidebar","Slugify"],"mappings":"6FAAA,kKAuDaA,EAAa,aAiCXC,UA9EO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACfC,EADuC,EAAlBC,YACrBD,SACeD,EAAKG,kBAApBC,WAKR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAK,cAAgBJ,IAC1B,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAKK,GAAI,CAACC,KAAM,EAAGC,MAAO,IACxB,iCACGR,EAAKG,kBAAkBM,MAAMC,KAAI,SAACC,EAAMC,GACvC,OACE,yBAAKC,IAAKD,GACR,kBAAC,IAAD,CACEP,MAAOM,EAAKG,KAAKC,YAAYV,MAC7BW,KAAML,EAAKG,KAAKC,YAAYC,KAC5BC,WAAYN,EAAKG,KAAKC,YAAYE,WAClCC,KAAMP,EAAKG,KAAKK,OAAOD,KACvBE,QAAST,EAAKG,KAAKM,QACnBC,KAAMV,EAAKG,KAAKC,YAAYM,KAC5BC,MACEX,EAAKG,KAAKC,YAAYQ,cAAcC,gBAAgBC,cAQlE,kBAAC,IAAD,CAAKnB,GAAI,CAACC,KAAM,EAAGC,MAAO,IACxB,kBAAC,IAAD,CAAaR,KAAMA,KAErB,kBAAC,IAAD,CAAKM,GAAI,CAACC,KAAM,EAAGC,MAAO,KACxB,kBAAC,IAAD,W,kCC/CV,kFASIkB,EAAW,SAAkBC,GAC/B,IAAIC,EAAYD,EAAMC,UAClBC,EAAYF,EAAME,UAClBC,EAAMH,EAAMI,IACZC,EAAa,YAA8BL,EAAO,CAAC,YAAa,YAAa,QAE7EM,EAAU,YAAgB,IAAWL,EAAW,aAAcC,GAClE,OAAO,IAAMK,cAAcJ,EAAK,YAAS,GAAIE,EAAY,CACvDJ,UAAWK,MAIfP,EAASS,aAhBU,CACjBJ,IAAK,KAgBQ,O,kCCtBf,4IAsCeK,IA/BE,SAAC,GAA2D,IAA1D/B,EAAyD,EAAzDA,MAAOY,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,KAAMF,EAAgC,EAAhCA,KAAMI,EAA0B,EAA1BA,QAASE,EAAiB,EAAjBA,MAAiB,EAAVD,KAE9D,OACE,kBAAC,IAAD,KAIE,kBAAC,OAAD,CAAMgB,GAAE,IAAMnB,GACZ,kBAAC,IAAD,CAAKO,MAAOH,KAEd,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,8BAAON,GADT,IAGE,wBAAIY,UAAU,mBACXX,EAAWP,KAAI,SAACT,EAAUW,GAAX,OACd,wBAAIC,IAAKD,GACL,kBAAC,IAAD,CAAO0B,MAAM,SAASrC,SAKhC,kBAAC,OAAD,CAAMoC,GAAE,IAAMnB,GACZ,kBAAC,IAAD,KAAYb,GACZ,kBAAC,IAAD,KAAWe,Q,kCC/BvB,6GAwCemB,IA3BK,SAAC,GAAc,IAAZvC,EAAW,EAAXA,KACrB,OACE,6BACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAW4B,UAAU,QAArB,cAEC5B,EAAKG,kBAAkBM,MAAMC,KAAI,SAACC,EAAMC,GACvC,OACE,wBAAIgB,UAAU,kBAAkBf,IAAKD,GAClCD,EAAKG,KAAKC,YAAYE,WAAWP,KAAI,SAACT,EAAUW,GAAX,OACpC,wBAAIC,IAAKD,GACP,kBAAC,OAAD,CAAMyB,GAAE,aAAeG,kBAAQvC,IAC7B,kBAAC,IAAD,CAAOqC,MAAM,SAASrC","file":"component---src-templates-category-posts-js-cbc56d34c768b56d9dc6.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { graphql } from \"gatsby\"\nimport {Row, Col} from 'reactstrap'\n\nimport PostGrid from \"../components/post-grid\"\nimport LeftSidebar from \"../components/left-sidebar\"\nimport RightSidebar from \"../components/right-sidebar\"\n\nconst CategoryPosts = ({ data, pageContext }) => {\n  const { category } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const pageHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${category}\"`\n\n  return (\n    <Layout>\n      <SEO title={`Category | ${category}`} />\n      <Row>\n        \n        <Col md={{size: 6, order: 6}}>\n          <section>\n            {data.allMarkdownRemark.edges.map((edge, index) => {\n              return (\n                <div key={index}>\n                  <PostGrid\n                    title={edge.node.frontmatter.title}\n                    date={edge.node.frontmatter.date}\n                    categories={edge.node.frontmatter.categories}\n                    slug={edge.node.fields.slug}\n                    excerpt={edge.node.excerpt}\n                    tags={edge.node.frontmatter.tags}\n                    image={\n                      edge.node.frontmatter.featuredImage.childImageSharp.fluid\n                    }\n                  />\n                </div>\n              )\n            })}\n          </section>\n        </Col>\n        <Col md={{size: 3, order: 1}}>\n          <LeftSidebar data={data} />\n        </Col>\n        <Col md={{size: 3, order: 12}}>\n          <RightSidebar />\n        </Col>\n      </Row>\n    </Layout>\n  )\n}\n\n// It retruns data in props\nexport const categoryQuery = graphql`\n  query blogPostsByCategory($category: String!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            categories\n            date(formatString: \"MMMM Do, YYYY\")\n            tags\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 700) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n\nexport default CategoryPosts\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar defaultProps = {\n  tag: 'p'\n};\n\nvar CardText = function CardText(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-text'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardText.defaultProps = defaultProps;\nexport default CardText;","import React from 'react'\nimport { Link } from 'gatsby'\nimport {Badge, Card, CardTitle, CardText, CardSubtitle, CardBody} from 'reactstrap'\nimport Img from 'gatsby-image'\n\nimport {Slugify} from '../util/slugify'\n\nconst PostGrid = ({title, categories, slug, date, excerpt, image, tags}) => {\n\n    return (\n      <Card>\n         {/* you need a / in your <Link> component. Without that it'll take the relative path \n         https://stackoverflow.com/questions/62414838/gatsby-js-blog-is-appending-blog-twice-to-a-post\n         */}\n        <Link to={`/${slug}`}>\n          <Img fluid={image} />\n        </Link>\n        <CardBody>\n          <CardSubtitle>\n            <span>{date}</span>\n            {` `}\n            <ul className='post-categories'>\n              {categories.map((category, index) => (\n                <li key={index}>\n                    <Badge color='light'>{category}</Badge>\n                </li>\n              ))}\n            </ul>\n          </CardSubtitle>\n          <Link to={`/${slug}`}>\n            <CardTitle>{title}</CardTitle>\n            <CardText>{excerpt}</CardText>\n          </Link>      \n        </CardBody>        \n      </Card>\n    )\n}\n\nexport default PostGrid","import React from \"react\"\nimport {\n  Card,\n  CardTitle,\n  CardSubtitle,\n  CardBody,\n  Badge,\n} from \"reactstrap\"\nimport { Link } from \"gatsby\"\nimport { Slugify } from \"../util/slugify\"\n\nimport Author from \"./author\"\n\nconst LeftSidebar = ({ data }) => {\n  return (\n    <div>\n      <Author />\n      <Card>\n        <CardBody>\n          <CardTitle className=\"mb-3\">Categories</CardTitle>\n\n          {data.allMarkdownRemark.edges.map((edge, index) => {\n            return (\n              <ul className=\"post-categories\" key={index}>\n                {edge.node.frontmatter.categories.map((category, index) => (\n                  <li key={index}>\n                    <Link to={`/category/${Slugify(category)}`}>\n                      <Badge color=\"light\">{category}</Badge>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            )\n          })}\n        </CardBody>\n      </Card>\n    </div>\n  )\n}\n\nexport default LeftSidebar\n"],"sourceRoot":""}