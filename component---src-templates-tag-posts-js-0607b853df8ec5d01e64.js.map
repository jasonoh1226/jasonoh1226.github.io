{"version":3,"sources":["webpack:///./src/templates/tag-posts.js","webpack:///./src/components/post-grid.js","webpack:///./src/components/left-sidebar.js"],"names":["tagQuery","TagPosts","data","tag","pageContext","title","lg","size","order","allMarkdownRemark","edges","map","edge","index","key","node","frontmatter","date","categories","slug","fields","excerpt","tags","image","featuredImage","childImageSharp","fluid","PostGrid","to","className","category","color","LeftSidebar"],"mappings":"8FAAA,6JAqDaA,EAAQ,YAmCNC,UA9EE,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,KAERC,EAF+B,EAAjBC,YAEdD,IAIP,OACI,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKE,MAAK,UAAYF,IACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,GAAI,CAACC,KAAM,EAAGC,MAAO,IAC1B,iCACGN,EAAKO,kBAAkBC,MAAMC,KAAI,SAACC,EAAMC,GACvC,OACE,yBAAKC,IAAKD,GACR,kBAAC,IAAD,CACER,MAAOO,EAAKG,KAAKC,YAAYX,MAC7BY,KAAML,EAAKG,KAAKC,YAAYC,KAC5BC,WAAYN,EAAKG,KAAKC,YAAYE,WAClCC,KAAMP,EAAKG,KAAKK,OAAOD,KACvBE,QAAST,EAAKG,KAAKM,QACnBC,KAAMV,EAAKG,KAAKC,YAAYM,KAC5BC,MACEX,EAAKG,KAAKC,YAAYQ,cAAcC,gBAAgBC,cAQhE,kBAAC,IAAD,CAAKpB,GAAI,CAACC,KAAM,EAAGC,MAAO,IACxB,kBAAC,IAAD,CAAaN,KAAMA,KAErB,kBAAC,IAAD,CAAKI,GAAI,CAACC,KAAM,EAAGC,MAAO,KACxB,kBAAC,IAAD,W,kCC7CZ,kIAoCemB,IA/BE,SAAC,GAA2D,IAA1DtB,EAAyD,EAAzDA,MAAOa,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,KAAMF,EAAgC,EAAhCA,KAAMI,EAA0B,EAA1BA,QAASE,EAAiB,EAAjBA,MAAiB,EAAVD,KAE9D,OACE,kBAAC,IAAD,KAIE,kBAAC,OAAD,CAAMM,GAAE,IAAMT,GACZ,kBAAC,IAAD,CAAKO,MAAOH,KAEd,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,8BAAON,GADT,IAGE,wBAAIY,UAAU,mBACXX,EAAWP,KAAI,SAACmB,EAAUjB,GAAX,OACd,wBAAIC,IAAKD,GACL,kBAAC,IAAD,CAAOkB,MAAM,SAASD,SAKhC,kBAAC,OAAD,CAAMF,GAAE,IAAMT,GACZ,kBAAC,IAAD,KAAYd,GACZ,kBAAC,IAAD,KAAWgB,Q,kCC7BvB,qCAuCeW,IA3BK,SAAC,GAAa,EAAX9B,KACrB,OACE,6BACE,kBAAC,IAAD","file":"component---src-templates-tag-posts-js-0607b853df8ec5d01e64.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport {graphql} from 'gatsby'\nimport {Row, Col} from 'reactstrap'\n\nimport PostGrid from '../components/post-grid'\nimport LeftSidebar from \"../components/left-sidebar\"\nimport RightSidebar from \"../components/right-sidebar\"\n\nconst TagPosts = ({data, pageContext}) => {\n\n    const {tag} = pageContext\n    // const {totalCount} = data.allMarkdownRemark\n    // const pageHeader = `${totalCount} post${totalCount === 1 ? '' : 's'} tagged with \"${tag}\"`\n\n    return (\n        <Layout>\n        <SEO title={`Tags | ${tag}`} />\n        <Row>\n          <Col lg={{size: 6, order: 6}}>\n          <section>\n            {data.allMarkdownRemark.edges.map((edge, index) => {\n              return (\n                <div key={index}>\n                  <PostGrid\n                    title={edge.node.frontmatter.title}\n                    date={edge.node.frontmatter.date}\n                    categories={edge.node.frontmatter.categories}\n                    slug={edge.node.fields.slug}\n                    excerpt={edge.node.excerpt}\n                    tags={edge.node.frontmatter.tags}\n                    image={\n                      edge.node.frontmatter.featuredImage.childImageSharp.fluid\n                    }\n                  />\n                </div>\n              )\n            })}\n          </section>\n          </Col>\n          <Col lg={{size: 3, order: 1}}>\n            <LeftSidebar data={data} />\n          </Col>\n          <Col lg={{size: 3, order: 12}}>\n            <RightSidebar />\n          </Col>\n        </Row>\n      </Layout>      \n    )\n}\n\n// It retruns data in props\nexport const tagQuery = graphql`\n\n  query blogPostsByTag($tag: String!) {\n    allMarkdownRemark(\n        sort: {fields: [frontmatter___date], order: DESC}\n        filter: {frontmatter: {tags: {in:[$tag]}}}\n     ) {\n         totalCount\n         edges {\n             node {\n                id\n                frontmatter {\n                  title\n                  categories\n                  date(formatString: \"MMMM Do, YYYY\")\n                  tags\n                  featuredImage {\n                    childImageSharp {\n                      fluid(maxWidth: 700) {\n                        ...GatsbyImageSharpFluid\n                      }\n                    }\n                  }\n                }\n                fields {\n                    slug\n                }\n                excerpt\n             }\n         }\n     \n    }\n  }\n`\n\nexport default TagPosts;","import React from 'react'\nimport { Link } from 'gatsby'\nimport {Badge, Card, CardTitle, CardText, CardSubtitle, CardBody} from 'reactstrap'\nimport Img from 'gatsby-image'\n\nconst PostGrid = ({title, categories, slug, date, excerpt, image, tags}) => {\n\n    return (\n      <Card>\n         {/* you need a / in your <Link> component. Without that it'll take the relative path \n         https://stackoverflow.com/questions/62414838/gatsby-js-blog-is-appending-blog-twice-to-a-post\n         */}\n        <Link to={`/${slug}`}>\n          <Img fluid={image} />\n        </Link>\n        <CardBody>\n          <CardSubtitle>\n            <span>{date}</span>\n            {` `}\n            <ul className='post-categories'>\n              {categories.map((category, index) => (\n                <li key={index}>\n                    <Badge color='light'>{category}</Badge>\n                </li>\n              ))}\n            </ul>\n          </CardSubtitle>\n          <Link to={`/${slug}`}>\n            <CardTitle>{title}</CardTitle>\n            <CardText>{excerpt}</CardText>\n          </Link>      \n        </CardBody>        \n      </Card>\n    )\n}\n\nexport default PostGrid","import React from \"react\"\n// import {\n//   Card,\n//   CardTitle,\n//   CardBody,\n//   Badge,\n// } from \"reactstrap\"\n// import { Link } from \"gatsby\"\n// import { Slugify } from \"../util/slugify\"\n\nimport Author from \"./author\"\n\nconst LeftSidebar = ({ data }) => {\n  return (\n    <div>\n      <Author />\n      {/* <Card>\n        <CardBody>\n          <CardTitle className=\"mb-3\">Categories</CardTitle>\n\n          {data.allMarkdownRemark.edges.map((edge, index) => {\n            return (\n              <ul className=\"post-categories\" key={index}>\n                {edge.node.frontmatter.categories.map((category, index) => (\n                  <li key={index}>\n                    <Link to={`/categories/${Slugify(category)}`}>\n                      <Badge color=\"light\">{category}</Badge>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            )\n          })}\n        </CardBody>\n      </Card> */}\n    </div>\n  )\n}\n\nexport default LeftSidebar\n"],"sourceRoot":""}